############
#   BASE   #
############
# pull image from the Debian official base
FROM python:3.8-slim-buster as base

# it is not recommended to put django files in /var/www - https://docs.djangoproject.com/en/3.0/intro/tutorial01/#console-block-1
WORKDIR /usr/src/project

# prevents Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1
# prevents Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED 1

# Replace shell with bash so we can source files and use arrays since POSIX doesn't allow for either
RUN rm /bin/sh && ln -s /bin/bash /bin/sh

RUN DEPENDENT_PACKAGES=( \
    # dependencies for building Python packages \
        build-essential \
    # basic bash commands \
        curl \
        wget \
    # psycopg2 dependencies \
        libpq-dev \
        gcc \
    # Django dbshell dependencies \
        postgresql-client \
    # Translations dependencies \
        gettext \
    ) \
    && apt-get update \
    # dependencies for building Python packages and doing basic terminal operations
    && apt-get install -y ${DEPENDENT_PACKAGES[@]} \
    # cleaning up unused files \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    && rm -rf /var/lib/apt/lists/*

######
# TODO: fix how everything runs as root
# https://medium.com/@DahlitzF/run-python-applications-as-non-root-user-in-docker-containers-by-example-cba46a0ff384
# https://github.com/lando/lando/blob/master/plugins/lando-core/scripts/user-perms.sh
######
RUN pip install --upgrade pip

#############
#   LOCAL   #
#############
FROM base as dev

COPY requirements requirements

# install python packages, with a developer-override if someone wants to override the existing developer.txt requirements
RUN pip install -r requirements/development-override.txt 2> /dev/null || pip install -r requirements/development.txt

# install common dev utilities
RUN apt-get update \
    && apt-get install -y wget curl git vim

# or ~/.nvm , depending
ENV NVM_DIR /usr/src/.nvm
ENV NODE_VERSION 12.16.3

# Install nvm with node and npm
RUN mkdir /usr/src/.nvm \
    && curl https://raw.githubusercontent.com/creationix/nvm/v0.35.3/install.sh | bash \
    && . $NVM_DIR/nvm.sh \
    && nvm install $NODE_VERSION \
    && nvm alias default $NODE_VERSION \
    && nvm use default

ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/v$NODE_VERSION/bin:$PATH

ENTRYPOINT ["/usr/src/project/entrypoint.sh"]

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

#############
#   BUILD   #
#############
FROM base as build

COPY requirements requirements

# TODO: installing this way is causing "ImportError: Couldn't import Django." to be thrown.
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/project/wheels -r requirements/build.txt

ENTRYPOINT ["/usr/src/project/entrypoint.sh"]

CMD ["gunicorn", "project.wsgi:application", "--bind", "0.0.0.0:8000"]